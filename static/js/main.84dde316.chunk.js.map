{"version":3,"sources":["pages/AuthService.js","pages/Sidebar.js","pages/Home.js","pages/NameComponent.js","pages/Login.js","pages/User.js","pages/Chat.js","pages/About.js","pages/Register.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","username","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","email","parse","getItem","logOut","AuthService","logout","Sidebar","useState","sidebar","setSidebar","showSidebar","className","type","onClick","to","href","Home","Component","required","createContext","value","role","Login","props","handleLogin","bind","onChangeUsername","onChangePassword","state","loading","message","e","this","setState","target","preventDefault","form","validateAll","checkBtn","context","_errors","length","login","console","log","history","push","error","resMessage","toString","onSubmit","ref","c","htmlFor","name","onChange","validations","disabled","style","display","withRouter","Chat","setName","user","getCurrentUser","sendMessage","clientRef","typedMessage","displayMessages","messages","map","msg","TextField","id","label","variant","event","inputProps","textAlign","Button","color","url","topics","onConnect","onDisconnect","onMessage","jobs","client","About","src","isEmail","vusername","vpassword","Register","handleRegister","onChangeEmail","successful","register","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84dde316.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"https://shishchat.herokuapp.com/\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + \"signin\", {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return axios.post(API_URL + \"signup\", {\r\n      username,\r\n      email,\r\n      password\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n}\r\n\r\nexport default new AuthService();","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Sidebar.css\";\r\nimport AuthService from \"./AuthService\";\r\n\r\nfunction logOut() {\r\n      AuthService.logout();\r\n}\r\n\r\nfunction Sidebar() {\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const showSidebar = () => setSidebar(!sidebar);\r\n\r\n  return (\r\n    <nav className={sidebar ? \"sidebar active\" : \"sidebar\"}>\r\n      <button className=\"hamburger\" type=\"button\" onClick={showSidebar}>\r\n        <div></div>\r\n      </button>\r\n      <ul onClick={showSidebar}>\r\n        <li><Link to=\"/home\">Home</Link></li>\r\n        <li><Link to=\"/chat\">Chat</Link></li>\r\n        <li><Link to=\"/about\">About</Link></li>\r\n        <li><a href=\"/\" className=\"nav-link\" onClick={logOut}>Log Out</a></li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport './Home.css';\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"page\">\r\n      <Sidebar />\r\n      <h1>Shishchat</h1>\r\n      <h3>The top Shishir themed chatting service</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\nclass NameComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: true,\n            name: null\n        }\n    }\n\n    handleClickOpen = () => {\n        this.setState({open: true});\n    };\n\n    handleClose = () => {\n        this.setState({open: false});\n    };\n\n    save = () => {\n        this.setState({open: false});\n        this.props.setName(this.state.name);\n    };\n\n    setEnteredName = (event) => {\n        this.setState({name: event.target.value});\n    };\n\n    render() {\n        return (\n            <div>\n                <Dialog open={this.state.open} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Chat</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Please enter your name\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Name\"\n                            type=\"name\" onChange={this.setEnteredName}\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.save} color=\"primary\">\n                            Save\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nexport default NameComponent;\n","import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport './Login.css';\r\nimport UserContext from './User';\r\nimport Chat from './Chat';\r\nimport Home from './Home';\r\n\r\nimport AuthService from \"./AuthService\";\r\n\r\nconst required = value => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nlet user = {\r\n    name: \"\"\r\n};\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      loading: false,\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n    return this.state.username;\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  }\r\n\r\n  handleLogin(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      message: \"\",\r\n      loading: true\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      AuthService.login(this.state.username, this.state.password).then(\r\n        () => {\r\n            console.log(\"Login Works\");\r\n            localStorage.setItem(\"user\", JSON.stringify(this.state.username));\r\n            this.props.history.push(\"/home\");\r\n        },\r\n        error => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          this.setState({\r\n            loading: false,\r\n            message: resMessage\r\n          });\r\n        }\r\n      );\r\n    } else {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-12\">\r\n        <div className=\"top\">\r\n            <h1>Shishchat</h1>\r\n            <h3>The top Shishir themed chatting service</h3>\r\n        </div>\r\n        <h2>Login</h2>\r\n        <div className=\"card card-container\">\r\n          <Form\r\n            onSubmit={this.handleLogin}\r\n            ref={c => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            <div className=\"form-group-username\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"username\"\r\n                value={this.state.username}\r\n                onChange={this.onChangeUsername}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group-password\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                name=\"password\"\r\n                value={this.state.password}\r\n                onChange={this.onChangePassword}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group-buttons\">\r\n                    <button\r\n                        className=\"btn btn-primary btn-block\"\r\n                        disabled={this.state.loading}\r\n                    >\r\n                    {this.state.loading && (\r\n                        <span className=\"spinner-border spinner-border-sm\"></span>\r\n                    )}\r\n                        <span>Login</span>\r\n                    </button>\r\n                <Link to=\"/signup\">\r\n                    <button className=\"btn btn-primary btn-block\"><span>Sign Up</span></button>\r\n                </Link>\r\n            </div>\r\n\r\n            {this.state.message && (\r\n              <div className=\"form-group\">\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                  {this.state.message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={c => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Login);","import { createContext } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport default UserContext;","import React, {Component, useContext} from 'react';\r\nimport SockJsClient from 'react-stomp';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './MessageStyle.css';\r\nimport NameComponent from \"./NameComponent\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Login from \"./Login\";\r\nimport AuthService from \"./AuthService\";\r\nimport User from \"./User\";\r\n\r\nclass Chat extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            messages: [],\r\n            typedMessage: \"\",\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    setName = () => {\r\n        const user = AuthService.getCurrentUser();\r\n\r\n        if (user) {\r\n            this.setState({\r\n                name: user\r\n            });\r\n        }\r\n    };\r\n\r\n    sendMessage = () => {\r\n        this.clientRef.sendMessage('/app/user-all', JSON.stringify({\r\n            name: this.state.name,\r\n            message: this.state.typedMessage\r\n        }));\r\n    };\r\n\r\n    displayMessages = () => {\r\n        return (\r\n            <div>\r\n                {this.state.messages.map(msg => {\r\n                    return (\r\n                        <div>\r\n                            {this.state.name == msg.name ?\r\n                                <div>\r\n                                    <p className=\"title1\">{msg.name}: {msg.message}</p><br/>\r\n                                </div> :\r\n                                <div>\r\n                                    <p className=\"title2\">{msg.name}: {msg.message}</p><br/>\r\n                                </div>\r\n                            }\r\n                        </div>)\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n                <div>\r\n                    <Sidebar />\r\n                    <div className=\"align-center\">\r\n                        <h1>Shishchat</h1>\r\n                        <br/><br/>\r\n                    </div>\r\n                    <div className=\"align-center\">\r\n                        User: <p className=\"title1\"> {this.state.name}</p>\r\n                        <br/><br/>\r\n                    </div>\r\n                    <div className=\"messages\">\r\n                        {this.displayMessages()}\r\n                    </div>\r\n                    <br/><br/>\r\n                    <div className=\"align-center\">\r\n                                        <br/><br/>\r\n                                        <table>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <TextField id=\"outlined-basic\" label=\"Enter Message to Send\" variant=\"outlined\"\r\n                                                               onChange={(event) => {\r\n                                                                   this.setState({typedMessage: event.target.value});\r\n                                                               }}\r\n                                                               inputProps={{style: { textAlign: 'left' }}}\r\n                                                               />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Button variant=\"contained\" color=\"primary\"\r\n                                                            onClick={this.sendMessage}>Send</Button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </table>\r\n                                    </div>\r\n                    <SockJsClient url='https://shishchat.herokuapp.com/websocket-chat'\r\n                                  topics={['/topic/user']}\r\n                                  onConnect={() => {\r\n                                      console.log(\"connected\");\r\n                                      this.setName();\r\n                                  }}\r\n                                  onDisconnect={() => {\r\n                                      console.log(\"Disconnected\");\r\n                                  }}\r\n                                  onMessage={(msg) => {\r\n                                      var jobs = this.state.messages;\r\n                                      jobs.push(msg);\r\n                                      this.setState({messages: jobs});\r\n                                      console.log(this.state);\r\n                                  }}\r\n                                  ref={(client) => {\r\n                                      this.clientRef = client\r\n                                  }}/>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat;","import React from \"react\";\r\nimport './About.css';\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n        <Sidebar />\r\n        <div className=\"page\">\r\n            <h1>Shishchat</h1>\r\n            <h3>The top Shishir themed chatting service</h3>\r\n        </div>\r\n        <div className=\"meet-shishir\">\r\n            <p><b>Meet Shishir</b></p>\r\n            <img src=\"Shishir.jpeg\"></img>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { isEmail } from \"validator\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./Register.css\";\r\n\r\nimport AuthService from \"./AuthService\";\r\n\r\nconst required = value => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst email = value => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vusername = value => {\r\n  if (value.length < 3 || value.length > 20) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The username must be between 3 and 20 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vpassword = value => {\r\n  if (value.length < 6 || value.length > 40) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The password must be between 6 and 40 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleRegister = this.handleRegister.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangeEmail = this.onChangeEmail.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      successful: false,\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangeEmail(e) {\r\n    this.setState({\r\n      email: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  }\r\n\r\n  handleRegister(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      message: \"\",\r\n      successful: false\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      AuthService.register(\r\n        this.state.username,\r\n        this.state.email,\r\n        this.state.password\r\n      ).then(\r\n        response => {\r\n          this.setState({\r\n            message: response.data.message,\r\n            successful: true\r\n          });\r\n        },\r\n        error => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          this.setState({\r\n            successful: false,\r\n            message: resMessage\r\n          });\r\n        }\r\n      );\r\n      this.props.history.push('/');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-12\">\r\n          <div className=\"top\">\r\n            <h1>Shishchat</h1>\r\n                <h3>The top Shishir themed chatting service</h3>\r\n            </div>\r\n          <h2>Sign Up</h2>\r\n          <div className=\"card card-container\">\r\n          <Form\r\n            onSubmit={this.handleRegister}\r\n            ref={c => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            {!this.state.successful && (\r\n              <div>\r\n                <div className=\"form-group-username\">\r\n                  <label htmlFor=\"username\">Username</label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"username\"\r\n                    value={this.state.username}\r\n                    onChange={this.onChangeUsername}\r\n                    validations={[required, vusername]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group-email\">\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChangeEmail}\r\n                    validations={[required, email]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group-password\">\r\n                  <label htmlFor=\"password\">Password</label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.onChangePassword}\r\n                    validations={[required, vpassword]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group-button\">\r\n                        <button className=\"btn btn-primary btn-block\">Sign Up</button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {this.state.message && (\r\n              <div className=\"form-group\">\r\n                <div\r\n                  className={\r\n                    this.state.successful\r\n                      ? \"alert alert-success\"\r\n                      : \"alert alert-danger\"\r\n                  }\r\n                  role=\"alert\"\r\n                >\r\n                  {this.state.message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={c => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Register);","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Chat from \"./pages/Chat\";\nimport About from \"./pages/About\";\nimport Sidebar from \"./pages/Sidebar\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport AuthService from \"./pages/AuthService\";\nimport User from \"./pages/User\";\n\nclass App extends Component {\n    render() {\n        return (\n                  <Router>\n                    <Switch>\n                      <Route path=\"/\" exact component={Login} />\n                      <Route path=\"/signup\" component={Register} />\n                      <Route path=\"/home\" component={Home} />\n                      <Route path=\"/chat\" component={Chat} />\n                      <Route path=\"/about\" component={About} />\n                    </Switch>\n                  </Router>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}