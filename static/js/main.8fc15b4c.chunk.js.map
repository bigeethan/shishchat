{"version":3,"sources":["pages/AuthService.js","pages/Sidebar.js","pages/Home.js","pages/NameComponent.js","pages/Login.js","pages/User.js","pages/Chat.js","pages/About.js","pages/Register.js","pages/Loading.js","pages/Post.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","username","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","email","parse","getItem","logOut","AuthService","logout","Sidebar","useState","sidebar","setSidebar","showSidebar","className","type","onClick","to","Home","props","state","user","getCurrentUser","posts","fetch","headers","json","setState","this","map","key","id","text","Component","required","createContext","value","role","Login","handleLogin","bind","onChangeUsername","onChangePassword","loading","message","e","target","preventDefault","form","validateAll","checkBtn","context","_errors","length","login","console","log","history","push","error","resMessage","toString","onSubmit","ref","c","htmlFor","name","onChange","validations","disabled","style","display","withRouter","Chat","setName","sendMessage","clientRef","typedMessage","displayMessages","messages","msg","TextField","label","variant","event","inputProps","textAlign","width","Button","color","url","topics","onConnect","onDisconnect","onMessage","jobs","client","About","src","isEmail","vusername","vpassword","Register","handleRegister","onChangeEmail","successful","register","Loading","setTimeout","get","Post","createPost","onChangePostText","onChangePostImageUrl","postName","postText","postImageUrl","method","body","image","responseJson","catch","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fc15b4c.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"https://shishchat.herokuapp.com/\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + \"signin\", {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return axios.post(API_URL + \"signup\", {\r\n      username,\r\n      email,\r\n      password\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n}\r\n\r\nexport default new AuthService();","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Sidebar.css\";\r\nimport AuthService from \"./AuthService\";\r\n\r\nfunction logOut() {\r\n      AuthService.logout();\r\n}\r\n\r\nfunction Sidebar() {\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const showSidebar = () => setSidebar(!sidebar);\r\n\r\n  return (\r\n    <nav className={sidebar ? \"sidebar active\" : \"sidebar\"}>\r\n      <button className=\"hamburger\" type=\"button\" onClick={showSidebar}>\r\n        <div></div>\r\n      </button>\r\n      <ul onClick={showSidebar}>\r\n        <li><Link to=\"/home\">Home</Link></li>\r\n        <li><Link to=\"/chat\">Chat</Link></li>\r\n        <li><Link to=\"/createpost\">Create ShishPost</Link></li>\r\n        <li><Link to=\"/about\">About</Link></li>\r\n        <li><Link to=\"/login\"><a className=\"nav-link\" onClick={logOut}>Log Out</a></Link></li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import React, {Component} from \"react\";\r\nimport './Home.css';\r\nimport Sidebar from \"./Sidebar\";\r\nimport AuthService from \"./AuthService\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: AuthService.getCurrentUser(),\r\n            posts: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://shishchat.herokuapp.com/getposts', {\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n            }\r\n        })\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                this.setState({\r\n                    posts: json\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"top-page\">\r\n                    <Sidebar />\r\n                    <h1>Shishchat</h1>\r\n                    <h3>The top Shishir themed chatting service</h3>\r\n                </div>\r\n                <div className=\"middle\">\r\n                    <h2>Welcome {this.state.user}</h2>\r\n                    <h2>ShishPosts:</h2>\r\n                    <div className=\"post-display\">\r\n                            {this.state.posts.map((posts) => (\r\n                                <div className='posts' key={posts.id}>\r\n                                        <p id=\"user\">{posts.user}</p>\r\n                                        <p id=\"text\">{posts.text}</p>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                </div>\r\n                <p id=\"secret\">Secret Message!</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\nclass NameComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: true,\n            name: null\n        }\n    }\n\n    handleClickOpen = () => {\n        this.setState({open: true});\n    };\n\n    handleClose = () => {\n        this.setState({open: false});\n    };\n\n    save = () => {\n        this.setState({open: false});\n        this.props.setName(this.state.name);\n    };\n\n    setEnteredName = (event) => {\n        this.setState({name: event.target.value});\n    };\n\n    render() {\n        return (\n            <div>\n                <Dialog open={this.state.open} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Chat</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Please enter your name\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Name\"\n                            type=\"name\" onChange={this.setEnteredName}\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.save} color=\"primary\">\n                            Save\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nexport default NameComponent;\n","import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport './Login.css';\r\nimport UserContext from './User';\r\nimport Chat from './Chat';\r\nimport Home from './Home';\r\n\r\nimport AuthService from \"./AuthService\";\r\n\r\nconst required = value => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nlet user = {\r\n    name: \"\"\r\n};\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      loading: false,\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n    return this.state.username;\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  }\r\n\r\n  handleLogin(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      message: \"\",\r\n      loading: true\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      AuthService.login(this.state.username, this.state.password).then(\r\n        () => {\r\n            console.log(\"Login Works\");\r\n            localStorage.setItem(\"user\", JSON.stringify(this.state.username));\r\n            this.props.history.push(\"/home\");\r\n        },\r\n        error => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          this.setState({\r\n            loading: false,\r\n            message: resMessage\r\n          });\r\n        }\r\n      );\r\n    } else {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-12\">\r\n        <div className=\"top\">\r\n            <h1>Shishchat</h1>\r\n            <h3>The top Shishir themed chatting service</h3>\r\n        </div>\r\n        <h2>Login</h2>\r\n        <div className=\"card card-container\">\r\n          <Form\r\n            onSubmit={this.handleLogin}\r\n            ref={c => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            <div className=\"form-group-username\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"username\"\r\n                value={this.state.username}\r\n                onChange={this.onChangeUsername}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group-password\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                name=\"password\"\r\n                value={this.state.password}\r\n                onChange={this.onChangePassword}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group-buttons\">\r\n                    <button\r\n                        className=\"btn btn-primary btn-block\"\r\n                        disabled={this.state.loading}\r\n                    >\r\n                    {this.state.loading && (\r\n                        <span className=\"spinner-border spinner-border-sm\"></span>\r\n                    )}\r\n                        <span>Login</span>\r\n                    </button>\r\n                <Link to=\"/signup\">\r\n                    <button className=\"btn btn-primary btn-block\"><span>Sign Up</span></button>\r\n                </Link>\r\n            </div>\r\n\r\n            {this.state.message && (\r\n              <div className=\"form-group\">\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                  {this.state.message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={c => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Login);","import { createContext } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport default UserContext;","import React, {Component, useContext} from 'react';\r\nimport SockJsClient from 'react-stomp';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './MessageStyle.css';\r\nimport NameComponent from \"./NameComponent\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Login from \"./Login\";\r\nimport AuthService from \"./AuthService\";\r\nimport User from \"./User\";\r\n\r\nclass Chat extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            messages: [],\r\n            typedMessage: \"\",\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    setName = () => {\r\n        const user = AuthService.getCurrentUser();\r\n\r\n        if (user) {\r\n            this.setState({\r\n                name: user\r\n            });\r\n        }\r\n    };\r\n\r\n    sendMessage = () => {\r\n        this.clientRef.sendMessage('/app/user-all', JSON.stringify({\r\n            name: this.state.name,\r\n            message: this.state.typedMessage\r\n        }));\r\n    };\r\n\r\n    displayMessages = () => {\r\n        return (\r\n            <div>\r\n                {this.state.messages.map(msg => {\r\n                    return (\r\n                        <div>\r\n                            {this.state.name == msg.name ?\r\n                                <div>\r\n                                    <p className=\"title1\">{msg.name}: {msg.message}</p><br/>\r\n                                </div> :\r\n                                <div>\r\n                                    <p className=\"title2\">{msg.name}: {msg.message}</p><br/>\r\n                                </div>\r\n                            }\r\n                        </div>)\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n                <div>\r\n                    <Sidebar />\r\n                    <div className=\"align-center\">\r\n                        <h1>Shishchat</h1>\r\n                        <br/><br/>\r\n                    </div>\r\n                    <div className=\"align-center\">\r\n                        User: <p className=\"title1\"> {this.state.name}</p>\r\n                        <br/><br/>\r\n                    </div>\r\n                    <div className=\"messages\">\r\n                        {this.displayMessages()}\r\n                    </div>\r\n                    <br/><br/>\r\n                    <div className=\"align-center\">\r\n                                        <br/><br/>\r\n                                        <table>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <TextField id=\"outlined-basic\" label=\"Enter Message to Send\" variant=\"outlined\"\r\n                                                               onChange={(event) => {\r\n                                                                   this.setState({typedMessage: event.target.value});\r\n                                                               }}\r\n                                                               inputProps={{style: { textAlign: 'left', width: 650 }}}\r\n                                                               />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Button variant=\"contained\" color=\"primary\"\r\n                                                            onClick={this.sendMessage}>Send</Button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </table>\r\n                                    </div>\r\n                    <SockJsClient url='https://shishchat.herokuapp.com/websocket-chat'\r\n                                  topics={['/topic/user']}\r\n                                  onConnect={() => {\r\n                                      console.log(\"connected\");\r\n                                      this.setName();\r\n                                  }}\r\n                                  onDisconnect={() => {\r\n                                      console.log(\"Disconnected\");\r\n                                  }}\r\n                                  onMessage={(msg) => {\r\n                                      var jobs = this.state.messages;\r\n                                      jobs.push(msg);\r\n                                      this.setState({messages: jobs});\r\n                                      console.log(this.state);\r\n                                  }}\r\n                                  ref={(client) => {\r\n                                      this.clientRef = client\r\n                                  }}/>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat;","import React from \"react\";\r\nimport './About.css';\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n        <Sidebar />\r\n        <div className=\"page\">\r\n            <h1>Shishchat</h1>\r\n            <h3>The top Shishir themed chatting service</h3>\r\n        </div>\r\n        <div className=\"meet-shishir\">\r\n            <p><b>Meet Shishir</b></p>\r\n            <img src=\"Shishir.jpeg\"></img>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { isEmail } from \"validator\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./Register.css\";\r\n\r\nimport AuthService from \"./AuthService\";\r\n\r\nconst required = value => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst email = value => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vusername = value => {\r\n  if (value.length < 3 || value.length > 20) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The username must be between 3 and 20 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vpassword = value => {\r\n  if (value.length < 6 || value.length > 40) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The password must be between 6 and 40 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleRegister = this.handleRegister.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangeEmail = this.onChangeEmail.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      successful: false,\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangeEmail(e) {\r\n    this.setState({\r\n      email: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  }\r\n\r\n  handleRegister(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      message: \"\",\r\n      successful: false\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      AuthService.register(\r\n        this.state.username,\r\n        this.state.email,\r\n        this.state.password\r\n      ).then(\r\n        response => {\r\n          this.setState({\r\n            message: response.data.message,\r\n            successful: true\r\n          });\r\n        },\r\n        error => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          this.setState({\r\n            successful: false,\r\n            message: resMessage\r\n          });\r\n        }\r\n      );\r\n      this.props.history.push('/login');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-12\">\r\n          <div className=\"top\">\r\n            <h1>Shishchat</h1>\r\n                <h3>The top Shishir themed chatting service</h3>\r\n            </div>\r\n          <h2>Sign Up</h2>\r\n          <div className=\"card card-container\">\r\n          <Form\r\n            onSubmit={this.handleRegister}\r\n            ref={c => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            {!this.state.successful && (\r\n              <div>\r\n                <div className=\"form-group-username\">\r\n                  <label htmlFor=\"username\">Username</label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"username\"\r\n                    value={this.state.username}\r\n                    onChange={this.onChangeUsername}\r\n                    validations={[required, vusername]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group-email\">\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChangeEmail}\r\n                    validations={[required, email]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group-password\">\r\n                  <label htmlFor=\"password\">Password</label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.onChangePassword}\r\n                    validations={[required, vpassword]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group-button\">\r\n                        <button className=\"btn btn-primary btn-block\">Sign Up</button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {this.state.message && (\r\n              <div className=\"form-group\">\r\n                <div\r\n                  className={\r\n                    this.state.successful\r\n                      ? \"alert alert-success\"\r\n                      : \"alert alert-danger\"\r\n                  }\r\n                  role=\"alert\"\r\n                >\r\n                  {this.state.message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={c => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Register);","import React, {Component} from 'react';\r\nimport axios from \"axios\";\r\nimport \"./Loading.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Loading extends Component {\r\n    state = {\r\n        loading: true,\r\n        message: \"\"\r\n    }\r\n\r\n    loading = event => {\r\n        setTimeout(() => {\r\n             axios.get('https://shishchat.herokuapp.com/loading')\r\n                         .then(response => this.setState({loading: false, message: response}));\r\n             if (this.state.loading == false) {\r\n                this.props.history.push(\"/login\");\r\n             }\r\n        }, 2000);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Please enjoy this complimentary photo of Shishir while the web application loads</h3>\r\n                <img src=\"Shishir.jpeg\"></img>\r\n                {this.loading()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Loading);","import React, {Component} from \"react\";\r\nimport './Post.css';\r\nimport Sidebar from \"./Sidebar\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport AuthService from \"./AuthService\";\r\n\r\nclass Post extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createPost = this.createPost.bind(this);\r\n        this.onChangePostText = this.onChangePostText.bind(this);\r\n        this.onChangePostImageUrl = this.onChangePostImageUrl.bind(this);\r\n\r\n        this.state = {\r\n            user: AuthService.getCurrentUser(),\r\n            postName: \"\",\r\n            postText: \"\",\r\n            postImageUrl: \"\"\r\n        }\r\n    }\r\n\r\n      onChangePostText(e) {\r\n        this.setState({\r\n          postText: e.target.value\r\n        });\r\n      }\r\n\r\n      onChangePostImageUrl(e) {\r\n        this.setState({\r\n          postImageUrl: e.target.value\r\n        });\r\n      }\r\n\r\n    createPost(e) {\r\n        e.preventDefault();\r\n        this.form.validateAll();\r\n\r\n        let username = this.state.user;\r\n        let postText = this.state.postText;\r\n        let postImageUrl = this.state.postImageUrl;\r\n\r\n        fetch('https://shishchat.herokuapp.com/createpost', {\r\n            method: \"post\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                user: username,\r\n                text: postText,\r\n                image: \"\"\r\n            })\r\n        })\r\n        .then((response) => response.json())\r\n           .then((responseJson) => {\r\n             console.log(responseJson);\r\n           })\r\n           .catch((error) => {\r\n             console.error(error);\r\n           });\r\n\r\n        this.setState({\r\n            postText: \"\",\r\n            postImageUrl: \"\"\r\n        });\r\n        return console.log(\"Another post confirmation!\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"top-page\">\r\n                    <Sidebar />\r\n                    <h1>Shishchat</h1>\r\n                    <h3>The top Shishir themed chatting service</h3>\r\n                </div>\r\n                <div className=\"middle\">\r\n                    <h2>Create ShishPost</h2>\r\n                    <Form\r\n                                onSubmit={this.createPost}\r\n                                ref={c => {\r\n                                    this.form = c;\r\n                                }}\r\n                              >\r\n                                  <div>\r\n                                    <div className=\"form-group-text\">\r\n                                      <label htmlFor=\"posttext\">Post Text</label>\r\n                                      <Input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"text\"\r\n                                        value={this.state.postText}\r\n                                        onChange={this.onChangePostText}\r\n                                      />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group-button\">\r\n                                            <button className=\"btn btn-primary btn-block\">Create Post</button>\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                <CheckButton\r\n                                  style={{ display: \"none\" }}\r\n                                  ref={c => {\r\n                                    this.checkBtn = c;\r\n                                  }}\r\n                                />\r\n                              </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Chat from \"./pages/Chat\";\nimport About from \"./pages/About\";\nimport Sidebar from \"./pages/Sidebar\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport AuthService from \"./pages/AuthService\";\nimport User from \"./pages/User\";\nimport Loading from \"./pages/Loading\";\nimport Post from \"./pages/Post\";\n\nclass App extends Component {\n    render() {\n        return (\n                  <Router>\n                    <Switch>\n                      <Route path=\"/\" exact component={Loading}/>\n                      <Route path=\"/login\" component={Login} />\n                      <Route path=\"/signup\" component={Register} />\n                      <Route path=\"/home\" component={Home} />\n                      <Route path=\"/chat\" component={Chat} />\n                      <Route path=\"/about\" component={About} />\n                      <Route path=\"/createpost\" component={Post} />\n                    </Switch>\n                  </Router>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}